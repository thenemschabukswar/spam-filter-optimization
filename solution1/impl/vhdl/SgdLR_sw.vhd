-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SgdLR_sw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    label_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    label_V_ce0 : OUT STD_LOGIC;
    label_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    theta_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    theta_V_ce0 : OUT STD_LOGIC;
    theta_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    theta_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    theta_V_ce1 : OUT STD_LOGIC;
    theta_V_we1 : OUT STD_LOGIC;
    theta_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SgdLR_sw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SgdLR_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.670400,HLS_SYN_LAT=70335001,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=17,HLS_SYN_FF=2677,HLS_SYN_LUT=4956,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv15_57E4 : STD_LOGIC_VECTOR (14 downto 0) := "101011111100100";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv13_1194 : STD_LOGIC_VECTOR (12 downto 0) := "1000110010100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_13 : STD_LOGIC_VECTOR (11 downto 0) := "000000010011";
    constant ap_const_lv12_FED : STD_LOGIC_VECTOR (11 downto 0) := "111111101101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv51_7FFFFAD000000 : STD_LOGIC_VECTOR (50 downto 0) := "111111111111111111110101101000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_s_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_297 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_i9_reg_309 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i9_reg_309_pp1_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state47_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_0_i9_reg_309_pp1_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i9_reg_309_pp1_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i9_reg_309_pp1_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i17_reg_321 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln21_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1163_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state54_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln77_reg_1355 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1355_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal icmp_ln52_reg_1336 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1336_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln107_fu_364_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln107_reg_1146 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln110_fu_376_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln110_reg_1151 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_384_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_reg_1157 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln21_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1163_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1163_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1163_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_398_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_1167 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal mul_ln1192_fu_431_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln1192_reg_1182 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal p_Result_8_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_V_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln938_fu_480_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln938_reg_1203 : STD_LOGIC_VECTOR (32 downto 0);
    signal l_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_514_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1214 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal or_ln_i_fu_615_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_i_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln954_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_4_reg_1235 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_2_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln935_fu_729_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal man_V_2_fu_789_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1266 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln571_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_827_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1283 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1301 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln603_fu_965_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal or_ln603_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1311 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_979_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_1_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln603_2_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln52_fu_1032_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln52_reg_1331 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln52_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1336_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1336_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1336_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1042_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_1340 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal trunc_ln7_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln77_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal icmp_ln77_reg_1355_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1092_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal theta_V_addr_1_reg_1369 : STD_LOGIC_VECTOR (9 downto 0);
    signal theta_V_addr_1_reg_1369_pp2_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal theta_V_addr_1_reg_1369_pp2_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gradient_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_V_load_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal mul_ln1192_1_fu_1107_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal mul_ln1192_1_reg_1380 : STD_LOGIC_VECTOR (50 downto 0);
    signal training_id_fu_1137_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state47 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal gradient_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal gradient_V_ce0 : STD_LOGIC;
    signal gradient_V_we0 : STD_LOGIC;
    signal indvar_flatten_reg_263 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_id_0_reg_274 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_301_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_i9_phi_fu_313_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln1117_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_1_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_1081_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln110_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1116_fu_404_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1117_fu_408_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_fu_431_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_437_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_fu_445_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal sub_ln1253_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_484_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_9_fu_494_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_502_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lsb_index_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_529_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_545_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_549_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_555_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln947_fu_559_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_4_fu_565_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln947_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln954_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln954_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln954_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_5_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_706_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_10_fu_713_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_753_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_767_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_i_fu_771_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_12_fu_779_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_11_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_783_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_741_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_763_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_803_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_815_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_821_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_868_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_872_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_884_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln585_1_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1002_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_1014_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal prob_V_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1193_fu_1022_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_1_fu_1048_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1117_1_fu_1052_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_fu_1066_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_1066_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_1066_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln1192_1_fu_1107_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_1_fu_1113_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_1_fu_1121_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component SgdLR_sw_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_sw_fdiv_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_sw_fpext_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SgdLR_sw_fexp_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_sw_gradient_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    gradient_V_U : component SgdLR_sw_gradient_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradient_V_address0,
        ce0 => gradient_V_ce0,
        we0 => gradient_V_we0,
        d0 => trunc_ln7_reg_1350,
        q0 => gradient_V_q0);

    SgdLR_sw_fadd_32nbkb_U1 : component SgdLR_sw_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i_reg_1250,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    SgdLR_sw_fdiv_32ncud_U2 : component SgdLR_sw_fdiv_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => tmp_2_i_reg_1255,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    SgdLR_sw_fpext_32dEe_U3 : component SgdLR_sw_fpext_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_assign_reg_1260,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p1);

    SgdLR_sw_fexp_32neOg_U4 : component SgdLR_sw_fexp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => select_ln935_reg_1245,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state47) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state47)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state47);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state54) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state54)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state54);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i17_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                i_0_i17_reg_321 <= ap_const_lv11_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln77_fu_1086_p2 = ap_const_lv1_0))) then 
                i_0_i17_reg_321 <= i_2_fu_1092_p2;
            end if; 
        end if;
    end process;

    i_0_i9_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln52_reg_1336 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_0_i9_reg_309 <= i_1_reg_1340;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_0_i9_reg_309 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln21_reg_1163 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_i_reg_297 <= i_reg_1167;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_297 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                indvar_flatten_reg_263 <= add_ln107_reg_1146;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_263 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln21_reg_1163_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_s_reg_285 <= ret_V_fu_445_p2(43 downto 12);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_285 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    training_id_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                training_id_0_reg_274 <= training_id_fu_1137_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                training_id_0_reg_274 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln107_reg_1146 <= add_ln107_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln77_reg_1355 = ap_const_lv1_0))) then
                gradient_V_load_reg_1375 <= gradient_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_0_i9_reg_309_pp1_iter1_reg <= i_0_i9_reg_309;
                icmp_ln52_reg_1336 <= icmp_ln52_fu_1036_p2;
                icmp_ln52_reg_1336_pp1_iter1_reg <= icmp_ln52_reg_1336;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                i_0_i9_reg_309_pp1_iter2_reg <= i_0_i9_reg_309_pp1_iter1_reg;
                i_0_i9_reg_309_pp1_iter3_reg <= i_0_i9_reg_309_pp1_iter2_reg;
                i_0_i9_reg_309_pp1_iter4_reg <= i_0_i9_reg_309_pp1_iter3_reg;
                icmp_ln52_reg_1336_pp1_iter2_reg <= icmp_ln52_reg_1336_pp1_iter1_reg;
                icmp_ln52_reg_1336_pp1_iter3_reg <= icmp_ln52_reg_1336_pp1_iter2_reg;
                icmp_ln52_reg_1336_pp1_iter4_reg <= icmp_ln52_reg_1336_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_0_i_reg_297_pp0_iter1_reg <= i_0_i_reg_297;
                icmp_ln21_reg_1163 <= icmp_ln21_fu_392_p2;
                icmp_ln21_reg_1163_pp0_iter1_reg <= icmp_ln21_reg_1163;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_1_reg_1340 <= i_1_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_1167 <= i_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln21_reg_1163_pp0_iter2_reg <= icmp_ln21_reg_1163_pp0_iter1_reg;
                icmp_ln21_reg_1163_pp0_iter3_reg <= icmp_ln21_reg_1163_pp0_iter2_reg;
                icmp_ln21_reg_1163_pp0_iter4_reg <= icmp_ln21_reg_1163_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                icmp_ln571_reg_1271 <= icmp_ln571_fu_797_p2;
                icmp_ln581_reg_1277 <= icmp_ln581_fu_809_p2;
                icmp_ln582_reg_1289 <= icmp_ln582_fu_835_p2;
                man_V_2_reg_1266 <= man_V_2_fu_789_p3;
                sh_amt_reg_1283 <= sh_amt_fu_827_p3;
                tmp_4_reg_1301 <= sh_amt_fu_827_p3(11 downto 5);
                trunc_ln583_reg_1295 <= trunc_ln583_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln77_reg_1355 <= icmp_ln77_fu_1086_p2;
                icmp_ln77_reg_1355_pp2_iter1_reg <= icmp_ln77_reg_1355;
                theta_V_addr_1_reg_1369_pp2_iter1_reg <= theta_V_addr_1_reg_1369;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln77_reg_1355_pp2_iter2_reg <= icmp_ln77_reg_1355_pp2_iter1_reg;
                theta_V_addr_1_reg_1369_pp2_iter2_reg <= theta_V_addr_1_reg_1369_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln954_reg_1230 <= icmp_ln954_fu_623_p2;
                    or_ln_i_reg_1225(0) <= or_ln_i_fu_615_p3(0);
                sub_ln944_reg_1219 <= sub_ln944_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                l_reg_1209 <= l_fu_510_p1;
                p_Result_8_reg_1192 <= p_Result_8_fu_466_p2;
                tmp_V_reg_1197 <= tmp_V_fu_472_p3;
                trunc_ln943_reg_1214 <= trunc_ln943_fu_514_p1;
                    zext_ln938_reg_1203(31 downto 0) <= zext_ln938_fu_480_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                m_4_reg_1235 <= m_1_fu_656_p2(31 downto 1);
                tmp_2_reg_1240 <= m_1_fu_656_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln77_reg_1355_pp2_iter1_reg = ap_const_lv1_0))) then
                    mul_ln1192_1_reg_1380(50 downto 24) <= mul_ln1192_1_fu_1107_p2(50 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1163_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1192_reg_1182 <= mul_ln1192_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                or_ln603_2_reg_1321 <= or_ln603_2_fu_992_p2;
                or_ln603_reg_1311 <= or_ln603_fu_973_p2;
                select_ln603_1_reg_1316 <= select_ln603_1_fu_979_p3;
                select_ln603_reg_1306 <= select_ln603_fu_965_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln77_reg_1355_pp2_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln21_reg_1163_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_350 <= theta_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln52_reg_1336_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln21_reg_1163_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_354 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_0))) then
                select_ln110_reg_1151 <= select_ln110_fu_376_p3;
                    shl_ln_reg_1157(22 downto 10) <= shl_ln_fu_384_p3(22 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                select_ln935_reg_1245 <= select_ln935_fu_729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                sext_ln52_reg_1331 <= sext_ln52_fu_1032_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln77_fu_1086_p2 = ap_const_lv1_0))) then
                theta_V_addr_1_reg_1369 <= zext_ln82_fu_1098_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_1_i_reg_1250 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_2_i_reg_1255 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_reg_1336_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln7_reg_1350 <= r_V_fu_1066_p2(43 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                v_assign_reg_1260 <= grp_fu_337_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1157(9 downto 0) <= "0000000000";
    zext_ln938_reg_1203(32) <= '0';
    or_ln_i_reg_1225(31 downto 1) <= "0000000000000000000000000000000";
    mul_ln1192_1_reg_1380(23 downto 0) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp2_iter2, icmp_ln107_fu_358_p2, ap_CS_fsm_state2, icmp_ln21_fu_392_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, icmp_ln52_fu_1036_p2, ap_enable_reg_pp1_iter0, icmp_ln77_fu_1086_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_fu_392_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_fu_392_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln52_fu_1036_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln52_fu_1036_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln77_fu_1086_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln77_fu_1086_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_763_p1));
    a_fu_576_p2 <= (icmp_ln947_fu_539_p2 and icmp_ln947_1_fu_570_p2);
    add_ln107_fu_364_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_263) + unsigned(ap_const_lv15_1));
    add_ln1117_1_fu_1052_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_1048_p1) + unsigned(shl_ln_reg_1157));
    add_ln1117_fu_408_p2 <= std_logic_vector(unsigned(shl_ln_reg_1157) + unsigned(zext_ln1116_fu_404_p1));
    add_ln581_fu_815_p2 <= std_logic_vector(signed(ap_const_lv12_FED) + signed(F2_fu_803_p2));
    add_ln954_fu_629_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_1219));
    add_ln964_fu_700_p2 <= std_logic_vector(unsigned(sub_ln964_fu_695_p2) + unsigned(select_ln964_fu_688_p3));
    and_ln581_fu_925_p2 <= (xor_ln582_fu_919_p2 and icmp_ln581_reg_1277);
    and_ln582_fu_910_p2 <= (xor_ln571_fu_905_p2 and icmp_ln582_reg_1289);
    and_ln585_1_fu_942_p2 <= (icmp_ln585_fu_858_p2 and and_ln581_fu_925_p2);
    and_ln585_fu_936_p2 <= (xor_ln585_fu_930_p2 and and_ln581_fu_925_p2);
    and_ln603_fu_959_p2 <= (xor_ln581_fu_953_p2 and icmp_ln603_fu_863_p2);
    and_ln949_fu_603_p2 <= (xor_ln949_fu_590_p2 and p_Result_3_fu_596_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(41);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(43);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state22 <= ap_CS_fsm(16);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state42 <= ap_CS_fsm(36);
    ap_CS_fsm_state43 <= ap_CS_fsm(37);
    ap_CS_fsm_state44 <= ap_CS_fsm(38);
    ap_CS_fsm_state45 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(40);
    ap_CS_fsm_state53 <= ap_CS_fsm(42);
    ap_CS_fsm_state58 <= ap_CS_fsm(44);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln21_fu_392_p2)
    begin
        if ((icmp_ln21_fu_392_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state47_assign_proc : process(icmp_ln52_fu_1036_p2)
    begin
        if ((icmp_ln52_fu_1036_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state47 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state54_assign_proc : process(icmp_ln77_fu_1086_p2)
    begin
        if ((icmp_ln77_fu_1086_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln107_fu_358_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i9_phi_fu_313_p4_assign_proc : process(i_0_i9_reg_309, ap_CS_fsm_pp1_stage0, icmp_ln52_reg_1336, i_1_reg_1340, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln52_reg_1336 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i9_phi_fu_313_p4 <= i_1_reg_1340;
        else 
            ap_phi_mux_i_0_i9_phi_fu_313_p4 <= i_0_i9_reg_309;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_301_p4_assign_proc : process(i_0_i_reg_297, ap_CS_fsm_pp0_stage0, icmp_ln21_reg_1163, i_reg_1167, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln21_reg_1163 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_phi_fu_301_p4 <= i_reg_1167;
        else 
            ap_phi_mux_i_0_i_phi_fu_301_p4 <= i_0_i_reg_297;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln107_fu_358_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln107_fu_358_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_872_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1266),to_integer(unsigned('0' & zext_ln586_fu_868_p1(31-1 downto 0)))));
    bitcast_ln696_fu_881_p1 <= v_assign_reg_1260;
    bitcast_ln739_fu_725_p1 <= p_Result_10_fu_713_p5;

    data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln1117_fu_413_p1, zext_ln1117_1_fu_1057_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data_V_address0 <= zext_ln1117_1_fu_1057_p1(23 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            data_V_address0 <= zext_ln1117_fu_413_p1(23 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_753_p4 <= ireg_V_fu_737_p1(62 downto 52);

    gradient_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, zext_ln57_fu_1081_p1, zext_ln82_fu_1098_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            gradient_V_address0 <= zext_ln82_fu_1098_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            gradient_V_address0 <= zext_ln57_fu_1081_p1(10 - 1 downto 0);
        else 
            gradient_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    gradient_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter5)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            gradient_V_ce0 <= ap_const_logic_1;
        else 
            gradient_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln52_reg_1336_pp1_iter4_reg, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln52_reg_1336_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            gradient_V_we0 <= ap_const_logic_1;
        else 
            gradient_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_1042_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i9_phi_fu_313_p4) + unsigned(ap_const_lv11_1));
    i_2_fu_1092_p2 <= std_logic_vector(unsigned(i_0_i17_reg_321) + unsigned(ap_const_lv11_1));
    i_fu_398_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_301_p4) + unsigned(ap_const_lv11_1));
    icmp_ln107_fu_358_p2 <= "1" when (indvar_flatten_reg_263 = ap_const_lv15_57E4) else "0";
    icmp_ln110_fu_370_p2 <= "1" when (training_id_0_reg_274 = ap_const_lv13_1194) else "0";
    icmp_ln21_fu_392_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_301_p4 = ap_const_lv11_400) else "0";
    icmp_ln52_fu_1036_p2 <= "1" when (ap_phi_mux_i_0_i9_phi_fu_313_p4 = ap_const_lv11_400) else "0";
    icmp_ln571_fu_797_p2 <= "1" when (trunc_ln556_fu_741_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_809_p2 <= "1" when (signed(F2_fu_803_p2) > signed(ap_const_lv12_13)) else "0";
    icmp_ln582_fu_835_p2 <= "1" when (F2_fu_803_p2 = ap_const_lv12_13) else "0";
    icmp_ln585_fu_858_p2 <= "1" when (unsigned(sh_amt_reg_1283) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_863_p2 <= "1" when (tmp_4_reg_1301 = ap_const_lv7_0) else "0";
    icmp_ln77_fu_1086_p2 <= "1" when (i_0_i17_reg_321 = ap_const_lv11_400) else "0";
    icmp_ln935_fu_679_p2 <= "1" when (p_Val2_s_reg_285 = ap_const_lv32_0) else "0";
    icmp_ln947_1_fu_570_p2 <= "0" when (p_Result_4_fu_565_p2 = ap_const_lv33_0) else "1";
    icmp_ln947_fu_539_p2 <= "1" when (signed(tmp_fu_529_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln954_fu_623_p2 <= "1" when (signed(lsb_index_fu_523_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_fu_737_p1 <= grp_fu_342_p1;
    l_fu_510_p1 <= tmp_i3_fu_502_p3(32 - 1 downto 0);
    label_V_address0 <= zext_ln117_fu_998_p1(13 - 1 downto 0);

    label_V_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            label_V_ce0 <= ap_const_logic_1;
        else 
            label_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_fu_1113_p3 <= (reg_350 & ap_const_lv19_0);
    lhs_V_fu_437_p3 <= (p_Val2_s_reg_285 & ap_const_lv12_0);
    lsb_index_fu_523_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_518_p2));
    lshr_ln947_fu_559_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_555_p1(31-1 downto 0)))));
    lshr_ln954_fu_634_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_reg_1197),to_integer(unsigned('0' & add_ln954_fu_629_p2(31-1 downto 0)))));
    m_1_fu_656_p2 <= std_logic_vector(unsigned(or_ln_i_reg_1225) + unsigned(m_fu_649_p3));
    m_5_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_reg_1235),32));
    m_fu_649_p3 <= 
        lshr_ln954_fu_634_p2 when (icmp_ln954_reg_1230(0) = '1') else 
        shl_ln954_fu_644_p2;
    man_V_1_fu_783_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_12_fu_779_p1));
    man_V_2_fu_789_p3 <= 
        man_V_1_fu_783_p2 when (p_Result_11_fu_745_p3(0) = '1') else 
        p_Result_12_fu_779_p1;
    mul_ln1192_1_fu_1107_p0 <= gradient_V_load_reg_1375;
    mul_ln1192_1_fu_1107_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_1_fu_1107_p0) * signed(ap_const_lv51_7FFFFAD000000))), 51));
    mul_ln1192_fu_431_p0 <= reg_354;
    mul_ln1192_fu_431_p1 <= reg_350;
    mul_ln1192_fu_431_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_431_p0) * signed(mul_ln1192_fu_431_p1))), 44));
    or_ln581_fu_948_p2 <= (or_ln582_fu_915_p2 or icmp_ln581_reg_1277);
    or_ln582_fu_915_p2 <= (icmp_ln582_reg_1289 or icmp_ln571_reg_1271);
    or_ln603_1_fu_986_p2 <= (and_ln585_fu_936_p2 or and_ln582_fu_910_p2);
    or_ln603_2_fu_992_p2 <= (or_ln603_fu_973_p2 or or_ln603_1_fu_986_p2);
    or_ln603_fu_973_p2 <= (and_ln603_fu_959_p2 or and_ln585_1_fu_942_p2);
    or_ln949_fu_609_p2 <= (and_ln949_fu_603_p2 or a_fu_576_p2);
    or_ln_i_fu_615_p3 <= (ap_const_lv31_0 & or_ln949_fu_609_p2);
    p_Result_10_fu_713_p5 <= (tmp_4_i_fu_706_p3 & m_5_fu_685_p1(22 downto 0));
    p_Result_11_fu_745_p3 <= ireg_V_fu_737_p1(63 downto 63);
    p_Result_12_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_i_fu_771_p3),54));
    p_Result_3_fu_596_p3 <= zext_ln938_reg_1203(to_integer(unsigned(lsb_index_fu_523_p2)) downto to_integer(unsigned(lsb_index_fu_523_p2))) when (to_integer(unsigned(lsb_index_fu_523_p2))>= 0 and to_integer(unsigned(lsb_index_fu_523_p2))<=32) else "-";
    p_Result_4_fu_565_p2 <= (zext_ln938_reg_1203 and lshr_ln947_fu_559_p2);
    p_Result_8_fu_466_p2 <= "1" when (signed(p_Val2_s_reg_285) > signed(ap_const_lv32_0)) else "0";
    p_Result_9_fu_494_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_s_fu_484_p4);
    
    p_Result_s_fu_484_p4_proc : process(zext_ln938_fu_480_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_s_fu_484_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln938_fu_480_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_s_fu_484_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_s_fu_484_p4_i) := zext_ln938_fu_480_p1(33-1-p_Result_s_fu_484_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_484_p4 <= resvalue(33-1 downto 0);
    end process;

    prob_V_fu_1007_p3 <= 
        select_ln603_2_fu_1002_p3 when (or_ln603_2_reg_1321(0) = '1') else 
        ap_const_lv32_0;
    r_V_fu_1066_p0 <= sext_ln52_reg_1331(32 - 1 downto 0);
    r_V_fu_1066_p1 <= reg_354;
    r_V_fu_1066_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_1066_p0) * signed(r_V_fu_1066_p1))), 44));
    ret_V_1_fu_1121_p2 <= std_logic_vector(unsigned(mul_ln1192_1_reg_1380) + unsigned(lhs_V_1_fu_1113_p3));
    ret_V_fu_445_p2 <= std_logic_vector(unsigned(mul_ln1192_reg_1182) + unsigned(lhs_V_fu_437_p3));
    select_ln110_fu_376_p3 <= 
        ap_const_lv13_0 when (icmp_ln110_fu_370_p2(0) = '1') else 
        training_id_0_reg_274;
    select_ln588_fu_892_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_5_fu_884_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln603_1_fu_979_p3 <= 
        select_ln588_fu_892_p3 when (and_ln585_fu_936_p2(0) = '1') else 
        trunc_ln583_reg_1295;
    select_ln603_2_fu_1002_p3 <= 
        select_ln603_reg_1306 when (or_ln603_reg_1311(0) = '1') else 
        select_ln603_1_reg_1316;
    select_ln603_fu_965_p3 <= 
        shl_ln604_fu_900_p2 when (and_ln603_fu_959_p2(0) = '1') else 
        trunc_ln586_fu_877_p1;
    select_ln935_fu_729_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_679_p2(0) = '1') else 
        bitcast_ln739_fu_725_p1;
    select_ln964_fu_688_p3 <= 
        ap_const_lv8_7F when (tmp_2_reg_1240(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln52_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_fu_1026_p2),44));

        sext_ln581_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1283),32));

    sh_amt_fu_827_p3 <= 
        add_ln581_fu_815_p2 when (icmp_ln581_fu_809_p2(0) = '1') else 
        sub_ln581_fu_821_p2;
    shl_ln1_fu_1014_p3 <= (label_V_q0 & ap_const_lv19_0);
    shl_ln604_fu_900_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1295),to_integer(unsigned('0' & sext_ln581_fu_855_p1(31-1 downto 0)))));
    shl_ln954_fu_644_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_reg_1197),to_integer(unsigned('0' & sub_ln954_fu_639_p2(31-1 downto 0)))));
    shl_ln_fu_384_p3 <= (select_ln110_fu_376_p3 & ap_const_lv10_0);
    sub_ln1253_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_s_reg_285));
    sub_ln581_fu_821_p2 <= std_logic_vector(unsigned(ap_const_lv12_13) - unsigned(F2_fu_803_p2));
    sub_ln703_fu_1026_p2 <= std_logic_vector(unsigned(prob_V_fu_1007_p3) - unsigned(zext_ln1193_fu_1022_p1));
    sub_ln944_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_reg_1209));
    sub_ln947_fu_549_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln947_fu_545_p1));
    sub_ln954_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1219));
    sub_ln964_fu_695_p2 <= std_logic_vector(unsigned(ap_const_lv8_E) - unsigned(trunc_ln943_reg_1214));

    theta_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, theta_V_addr_1_reg_1369, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln25_fu_418_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            theta_V_address0 <= theta_V_addr_1_reg_1369;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            theta_V_address0 <= zext_ln25_fu_418_p1(10 - 1 downto 0);
        else 
            theta_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    theta_V_address1 <= theta_V_addr_1_reg_1369_pp2_iter2_reg;

    theta_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            theta_V_ce0 <= ap_const_logic_1;
        else 
            theta_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            theta_V_ce1 <= ap_const_logic_1;
        else 
            theta_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    theta_V_d1 <= ret_V_1_fu_1121_p2(50 downto 19);

    theta_V_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln77_reg_1355_pp2_iter2_reg, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln77_reg_1355_pp2_iter2_reg = ap_const_lv1_0))) then 
            theta_V_we1 <= ap_const_logic_1;
        else 
            theta_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_582_p3 <= lsb_index_fu_523_p2(31 downto 31);
    tmp_4_i_fu_706_p3 <= (p_Result_8_reg_1192 & add_ln964_fu_700_p2);
    tmp_5_fu_884_p3 <= bitcast_ln696_fu_881_p1(31 downto 31);
    tmp_5_i_fu_771_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_767_p1);
    tmp_V_fu_472_p3 <= 
        p_Val2_s_reg_285 when (p_Result_8_fu_466_p2(0) = '1') else 
        sub_ln1253_fu_460_p2;
    tmp_fu_529_p4 <= lsb_index_fu_523_p2(31 downto 1);
    
    tmp_i3_fu_502_p3_proc : process(p_Result_9_fu_494_p3)
    begin
        tmp_i3_fu_502_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_9_fu_494_p3(i) = '1' then
                tmp_i3_fu_502_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    training_id_fu_1137_p2 <= std_logic_vector(unsigned(select_ln110_reg_1151) + unsigned(ap_const_lv13_1));
    trunc_ln556_fu_741_p1 <= ireg_V_fu_737_p1(63 - 1 downto 0);
    trunc_ln565_fu_767_p1 <= ireg_V_fu_737_p1(52 - 1 downto 0);
    trunc_ln583_fu_841_p1 <= man_V_2_fu_789_p3(32 - 1 downto 0);
    trunc_ln586_fu_877_p1 <= ashr_ln586_fu_872_p2(32 - 1 downto 0);
    trunc_ln943_fu_514_p1 <= tmp_i3_fu_502_p3(8 - 1 downto 0);
    trunc_ln947_fu_545_p1 <= sub_ln944_fu_518_p2(6 - 1 downto 0);
    xor_ln571_fu_905_p2 <= (icmp_ln571_reg_1271 xor ap_const_lv1_1);
    xor_ln581_fu_953_p2 <= (or_ln581_fu_948_p2 xor ap_const_lv1_1);
    xor_ln582_fu_919_p2 <= (or_ln582_fu_915_p2 xor ap_const_lv1_1);
    xor_ln585_fu_930_p2 <= (icmp_ln585_fu_858_p2 xor ap_const_lv1_1);
    xor_ln949_fu_590_p2 <= (tmp_1_fu_582_p3 xor ap_const_lv1_1);
    zext_ln1116_1_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i9_phi_fu_313_p4),23));
    zext_ln1116_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i_phi_fu_301_p4),23));
    zext_ln1117_1_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_fu_1052_p2),64));
    zext_ln1117_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_408_p2),64));
    zext_ln117_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln110_reg_1151),64));
    zext_ln1193_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1014_p3),32));
    zext_ln25_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_297_pp0_iter1_reg),64));
    zext_ln461_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_753_p4),12));
    zext_ln57_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i9_reg_309_pp1_iter4_reg),64));
    zext_ln586_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_855_p1),54));
    zext_ln82_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i17_reg_321),64));
    zext_ln938_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_472_p3),33));
    zext_ln947_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_549_p2),33));
end behav;
