// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SgdLR_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.670400,HLS_SYN_LAT=70335001,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=17,HLS_SYN_FF=2677,HLS_SYN_LUT=4956,HLS_VERSION=2019_1}" *)

module SgdLR_sw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        label_V_address0,
        label_V_ce0,
        label_V_q0,
        theta_V_address0,
        theta_V_ce0,
        theta_V_q0,
        theta_V_address1,
        theta_V_ce1,
        theta_V_we1,
        theta_V_d1
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_pp0_stage0 = 45'd4;
parameter    ap_ST_fsm_state9 = 45'd8;
parameter    ap_ST_fsm_state10 = 45'd16;
parameter    ap_ST_fsm_state11 = 45'd32;
parameter    ap_ST_fsm_state12 = 45'd64;
parameter    ap_ST_fsm_state13 = 45'd128;
parameter    ap_ST_fsm_state14 = 45'd256;
parameter    ap_ST_fsm_state15 = 45'd512;
parameter    ap_ST_fsm_state16 = 45'd1024;
parameter    ap_ST_fsm_state17 = 45'd2048;
parameter    ap_ST_fsm_state18 = 45'd4096;
parameter    ap_ST_fsm_state19 = 45'd8192;
parameter    ap_ST_fsm_state20 = 45'd16384;
parameter    ap_ST_fsm_state21 = 45'd32768;
parameter    ap_ST_fsm_state22 = 45'd65536;
parameter    ap_ST_fsm_state23 = 45'd131072;
parameter    ap_ST_fsm_state24 = 45'd262144;
parameter    ap_ST_fsm_state25 = 45'd524288;
parameter    ap_ST_fsm_state26 = 45'd1048576;
parameter    ap_ST_fsm_state27 = 45'd2097152;
parameter    ap_ST_fsm_state28 = 45'd4194304;
parameter    ap_ST_fsm_state29 = 45'd8388608;
parameter    ap_ST_fsm_state30 = 45'd16777216;
parameter    ap_ST_fsm_state31 = 45'd33554432;
parameter    ap_ST_fsm_state32 = 45'd67108864;
parameter    ap_ST_fsm_state33 = 45'd134217728;
parameter    ap_ST_fsm_state34 = 45'd268435456;
parameter    ap_ST_fsm_state35 = 45'd536870912;
parameter    ap_ST_fsm_state36 = 45'd1073741824;
parameter    ap_ST_fsm_state37 = 45'd2147483648;
parameter    ap_ST_fsm_state38 = 45'd4294967296;
parameter    ap_ST_fsm_state39 = 45'd8589934592;
parameter    ap_ST_fsm_state40 = 45'd17179869184;
parameter    ap_ST_fsm_state41 = 45'd34359738368;
parameter    ap_ST_fsm_state42 = 45'd68719476736;
parameter    ap_ST_fsm_state43 = 45'd137438953472;
parameter    ap_ST_fsm_state44 = 45'd274877906944;
parameter    ap_ST_fsm_state45 = 45'd549755813888;
parameter    ap_ST_fsm_state46 = 45'd1099511627776;
parameter    ap_ST_fsm_pp1_stage0 = 45'd2199023255552;
parameter    ap_ST_fsm_state53 = 45'd4398046511104;
parameter    ap_ST_fsm_pp2_stage0 = 45'd8796093022208;
parameter    ap_ST_fsm_state58 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [22:0] data_V_address0;
output   data_V_ce0;
input  [15:0] data_V_q0;
output  [12:0] label_V_address0;
output   label_V_ce0;
input  [7:0] label_V_q0;
output  [9:0] theta_V_address0;
output   theta_V_ce0;
input  [31:0] theta_V_q0;
output  [9:0] theta_V_address1;
output   theta_V_ce1;
output   theta_V_we1;
output  [31:0] theta_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[22:0] data_V_address0;
reg data_V_ce0;
reg label_V_ce0;
reg[9:0] theta_V_address0;
reg theta_V_ce0;
reg theta_V_ce1;
reg theta_V_we1;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] p_Val2_s_reg_285;
reg   [10:0] i_0_i_reg_297;
reg   [10:0] i_0_i_reg_297_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] i_0_i9_reg_309;
reg   [10:0] i_0_i9_reg_309_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state47_pp1_stage0_iter0;
wire    ap_block_state48_pp1_stage0_iter1;
wire    ap_block_state49_pp1_stage0_iter2;
wire    ap_block_state50_pp1_stage0_iter3;
wire    ap_block_state51_pp1_stage0_iter4;
wire    ap_block_state52_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
reg   [10:0] i_0_i9_reg_309_pp1_iter2_reg;
reg   [10:0] i_0_i9_reg_309_pp1_iter3_reg;
reg   [10:0] i_0_i9_reg_309_pp1_iter4_reg;
reg   [10:0] i_0_i17_reg_321;
reg   [31:0] reg_350;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln21_reg_1163;
reg   [0:0] icmp_ln21_reg_1163_pp0_iter2_reg;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state54_pp2_stage0_iter0;
wire    ap_block_state55_pp2_stage0_iter1;
wire    ap_block_state56_pp2_stage0_iter2;
wire    ap_block_state57_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln77_reg_1355;
reg   [0:0] icmp_ln77_reg_1355_pp2_iter1_reg;
reg   [15:0] reg_354;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln52_reg_1336;
reg   [0:0] icmp_ln52_reg_1336_pp1_iter2_reg;
wire   [0:0] icmp_ln107_fu_358_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] add_ln107_fu_364_p2;
reg   [14:0] add_ln107_reg_1146;
wire   [12:0] select_ln110_fu_376_p3;
reg   [12:0] select_ln110_reg_1151;
wire   [22:0] shl_ln_fu_384_p3;
reg   [22:0] shl_ln_reg_1157;
wire   [0:0] icmp_ln21_fu_392_p2;
reg   [0:0] icmp_ln21_reg_1163_pp0_iter1_reg;
reg   [0:0] icmp_ln21_reg_1163_pp0_iter3_reg;
reg   [0:0] icmp_ln21_reg_1163_pp0_iter4_reg;
wire   [10:0] i_fu_398_p2;
reg   [10:0] i_reg_1167;
reg    ap_enable_reg_pp0_iter0;
wire   [43:0] mul_ln1192_fu_431_p2;
reg   [43:0] mul_ln1192_reg_1182;
reg    ap_enable_reg_pp0_iter5;
wire   [0:0] p_Result_8_fu_466_p2;
reg   [0:0] p_Result_8_reg_1192;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp_V_fu_472_p3;
reg   [31:0] tmp_V_reg_1197;
wire   [32:0] zext_ln938_fu_480_p1;
reg   [32:0] zext_ln938_reg_1203;
wire   [31:0] l_fu_510_p1;
reg   [31:0] l_reg_1209;
wire   [7:0] trunc_ln943_fu_514_p1;
reg   [7:0] trunc_ln943_reg_1214;
wire   [31:0] sub_ln944_fu_518_p2;
reg   [31:0] sub_ln944_reg_1219;
wire    ap_CS_fsm_state10;
wire   [31:0] or_ln_i_fu_615_p3;
reg   [31:0] or_ln_i_reg_1225;
wire   [0:0] icmp_ln954_fu_623_p2;
reg   [0:0] icmp_ln954_reg_1230;
reg   [30:0] m_4_reg_1235;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_2_reg_1240;
wire   [31:0] select_ln935_fu_729_p3;
reg   [31:0] select_ln935_reg_1245;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_345_p2;
reg   [31:0] tmp_1_i_reg_1250;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_332_p2;
reg   [31:0] tmp_2_i_reg_1255;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_337_p2;
reg   [31:0] v_assign_reg_1260;
wire    ap_CS_fsm_state42;
wire   [53:0] man_V_2_fu_789_p3;
reg   [53:0] man_V_2_reg_1266;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln571_fu_797_p2;
reg   [0:0] icmp_ln571_reg_1271;
wire   [0:0] icmp_ln581_fu_809_p2;
reg   [0:0] icmp_ln581_reg_1277;
wire  signed [11:0] sh_amt_fu_827_p3;
reg  signed [11:0] sh_amt_reg_1283;
wire   [0:0] icmp_ln582_fu_835_p2;
reg   [0:0] icmp_ln582_reg_1289;
wire   [31:0] trunc_ln583_fu_841_p1;
reg   [31:0] trunc_ln583_reg_1295;
reg   [6:0] tmp_4_reg_1301;
wire   [31:0] select_ln603_fu_965_p3;
reg   [31:0] select_ln603_reg_1306;
wire    ap_CS_fsm_state45;
wire   [0:0] or_ln603_fu_973_p2;
reg   [0:0] or_ln603_reg_1311;
wire   [31:0] select_ln603_1_fu_979_p3;
reg   [31:0] select_ln603_1_reg_1316;
wire   [0:0] or_ln603_2_fu_992_p2;
reg   [0:0] or_ln603_2_reg_1321;
wire  signed [43:0] sext_ln52_fu_1032_p1;
reg  signed [43:0] sext_ln52_reg_1331;
wire    ap_CS_fsm_state46;
wire   [0:0] icmp_ln52_fu_1036_p2;
reg   [0:0] icmp_ln52_reg_1336_pp1_iter1_reg;
reg   [0:0] icmp_ln52_reg_1336_pp1_iter3_reg;
reg   [0:0] icmp_ln52_reg_1336_pp1_iter4_reg;
wire   [10:0] i_1_fu_1042_p2;
reg   [10:0] i_1_reg_1340;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] trunc_ln7_reg_1350;
wire   [0:0] icmp_ln77_fu_1086_p2;
wire    ap_CS_fsm_pp2_stage0;
reg   [0:0] icmp_ln77_reg_1355_pp2_iter2_reg;
wire   [10:0] i_2_fu_1092_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [9:0] theta_V_addr_1_reg_1369;
reg   [9:0] theta_V_addr_1_reg_1369_pp2_iter1_reg;
reg   [9:0] theta_V_addr_1_reg_1369_pp2_iter2_reg;
wire   [31:0] gradient_V_q0;
reg   [31:0] gradient_V_load_reg_1375;
reg    ap_enable_reg_pp2_iter1;
wire   [50:0] mul_ln1192_1_fu_1107_p2;
reg   [50:0] mul_ln1192_1_reg_1380;
wire   [12:0] training_id_fu_1137_p2;
wire    ap_CS_fsm_state58;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state47;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
wire    ap_CS_fsm_state53;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state54;
reg    ap_enable_reg_pp2_iter3;
reg   [9:0] gradient_V_address0;
reg    gradient_V_ce0;
reg    gradient_V_we0;
reg   [14:0] indvar_flatten_reg_263;
reg   [12:0] training_id_0_reg_274;
reg   [10:0] ap_phi_mux_i_0_i_phi_fu_301_p4;
wire    ap_block_pp0_stage0;
reg   [10:0] ap_phi_mux_i_0_i9_phi_fu_313_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln1117_fu_413_p1;
wire   [63:0] zext_ln25_fu_418_p1;
wire   [63:0] zext_ln117_fu_998_p1;
wire   [63:0] zext_ln1117_1_fu_1057_p1;
wire   [63:0] zext_ln57_fu_1081_p1;
wire   [63:0] zext_ln82_fu_1098_p1;
wire    ap_block_pp2_stage0;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln110_fu_370_p2;
wire   [22:0] zext_ln1116_fu_404_p1;
wire   [22:0] add_ln1117_fu_408_p2;
wire  signed [15:0] mul_ln1192_fu_431_p0;
wire  signed [31:0] mul_ln1192_fu_431_p1;
wire   [43:0] lhs_V_fu_437_p3;
wire   [43:0] ret_V_fu_445_p2;
wire   [31:0] sub_ln1253_fu_460_p2;
reg   [32:0] p_Result_s_fu_484_p4;
wire   [63:0] p_Result_9_fu_494_p3;
reg   [63:0] tmp_i3_fu_502_p3;
wire   [31:0] lsb_index_fu_523_p2;
wire   [30:0] tmp_fu_529_p4;
wire   [5:0] trunc_ln947_fu_545_p1;
wire   [5:0] sub_ln947_fu_549_p2;
wire   [32:0] zext_ln947_fu_555_p1;
wire   [32:0] lshr_ln947_fu_559_p2;
wire   [32:0] p_Result_4_fu_565_p2;
wire   [0:0] icmp_ln947_fu_539_p2;
wire   [0:0] icmp_ln947_1_fu_570_p2;
wire   [0:0] tmp_1_fu_582_p3;
wire   [0:0] p_Result_3_fu_596_p3;
wire   [0:0] xor_ln949_fu_590_p2;
wire   [0:0] and_ln949_fu_603_p2;
wire   [0:0] a_fu_576_p2;
wire   [0:0] or_ln949_fu_609_p2;
wire   [31:0] add_ln954_fu_629_p2;
wire   [31:0] sub_ln954_fu_639_p2;
wire   [31:0] lshr_ln954_fu_634_p2;
wire   [31:0] shl_ln954_fu_644_p2;
wire   [31:0] m_fu_649_p3;
wire   [31:0] m_1_fu_656_p2;
wire   [7:0] sub_ln964_fu_695_p2;
wire   [7:0] select_ln964_fu_688_p3;
wire   [7:0] add_ln964_fu_700_p2;
wire   [31:0] m_5_fu_685_p1;
wire   [8:0] tmp_4_i_fu_706_p3;
wire   [31:0] p_Result_10_fu_713_p5;
wire   [0:0] icmp_ln935_fu_679_p2;
wire   [31:0] bitcast_ln739_fu_725_p1;
wire   [63:0] grp_fu_342_p1;
wire   [63:0] ireg_V_fu_737_p1;
wire   [10:0] exp_tmp_V_fu_753_p4;
wire   [51:0] trunc_ln565_fu_767_p1;
wire   [52:0] tmp_5_i_fu_771_p3;
wire   [53:0] p_Result_12_fu_779_p1;
wire   [0:0] p_Result_11_fu_745_p3;
wire   [53:0] man_V_1_fu_783_p2;
wire   [62:0] trunc_ln556_fu_741_p1;
wire   [11:0] zext_ln461_fu_763_p1;
wire   [11:0] F2_fu_803_p2;
wire   [11:0] add_ln581_fu_815_p2;
wire   [11:0] sub_ln581_fu_821_p2;
wire  signed [31:0] sext_ln581_fu_855_p1;
wire   [53:0] zext_ln586_fu_868_p1;
wire   [53:0] ashr_ln586_fu_872_p2;
wire   [31:0] bitcast_ln696_fu_881_p1;
wire   [0:0] tmp_5_fu_884_p3;
wire   [0:0] xor_ln571_fu_905_p2;
wire   [0:0] or_ln582_fu_915_p2;
wire   [0:0] xor_ln582_fu_919_p2;
wire   [0:0] icmp_ln585_fu_858_p2;
wire   [0:0] and_ln581_fu_925_p2;
wire   [0:0] xor_ln585_fu_930_p2;
wire   [0:0] or_ln581_fu_948_p2;
wire   [0:0] icmp_ln603_fu_863_p2;
wire   [0:0] xor_ln581_fu_953_p2;
wire   [0:0] and_ln603_fu_959_p2;
wire   [31:0] shl_ln604_fu_900_p2;
wire   [31:0] trunc_ln586_fu_877_p1;
wire   [0:0] and_ln585_1_fu_942_p2;
wire   [0:0] and_ln585_fu_936_p2;
wire   [31:0] select_ln588_fu_892_p3;
wire   [0:0] and_ln582_fu_910_p2;
wire   [0:0] or_ln603_1_fu_986_p2;
wire   [31:0] select_ln603_2_fu_1002_p3;
wire   [26:0] shl_ln1_fu_1014_p3;
wire   [31:0] prob_V_fu_1007_p3;
wire   [31:0] zext_ln1193_fu_1022_p1;
wire   [31:0] sub_ln703_fu_1026_p2;
wire   [22:0] zext_ln1116_1_fu_1048_p1;
wire   [22:0] add_ln1117_1_fu_1052_p2;
wire  signed [31:0] r_V_fu_1066_p0;
wire  signed [15:0] r_V_fu_1066_p1;
wire   [43:0] r_V_fu_1066_p2;
wire  signed [31:0] mul_ln1192_1_fu_1107_p0;
wire   [50:0] lhs_V_1_fu_1113_p3;
wire   [50:0] ret_V_1_fu_1121_p2;
reg   [44:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
end

SgdLR_sw_gradient_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
gradient_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gradient_V_address0),
    .ce0(gradient_V_ce0),
    .we0(gradient_V_we0),
    .d0(trunc_ln7_reg_1350),
    .q0(gradient_V_q0)
);

SgdLR_sw_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_i_reg_1250),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

SgdLR_sw_fdiv_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_fdiv_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(tmp_2_i_reg_1255),
    .ce(1'b1),
    .dout(grp_fu_337_p2)
);

SgdLR_sw_fpext_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SgdLR_sw_fpext_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_assign_reg_1260),
    .ce(1'b1),
    .dout(grp_fu_342_p1)
);

SgdLR_sw_fexp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_fexp_32neOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(select_ln935_reg_1245),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state47) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state47)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state47);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state54) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state54)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state54);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        i_0_i17_reg_321 <= 11'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln77_fu_1086_p2 == 1'd0))) begin
        i_0_i17_reg_321 <= i_2_fu_1092_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_1336 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_0_i9_reg_309 <= i_1_reg_1340;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i_0_i9_reg_309 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln21_reg_1163 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_reg_297 <= i_reg_1167;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd0))) begin
        i_0_i_reg_297 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        indvar_flatten_reg_263 <= add_ln107_reg_1146;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_263 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln21_reg_1163_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_285 <= {{ret_V_fu_445_p2[43:12]}};
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd0))) begin
        p_Val2_s_reg_285 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        training_id_0_reg_274 <= training_id_fu_1137_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        training_id_0_reg_274 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln107_reg_1146 <= add_ln107_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln77_reg_1355 == 1'd0))) begin
        gradient_V_load_reg_1375 <= gradient_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_0_i9_reg_309_pp1_iter1_reg <= i_0_i9_reg_309;
        icmp_ln52_reg_1336 <= icmp_ln52_fu_1036_p2;
        icmp_ln52_reg_1336_pp1_iter1_reg <= icmp_ln52_reg_1336;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        i_0_i9_reg_309_pp1_iter2_reg <= i_0_i9_reg_309_pp1_iter1_reg;
        i_0_i9_reg_309_pp1_iter3_reg <= i_0_i9_reg_309_pp1_iter2_reg;
        i_0_i9_reg_309_pp1_iter4_reg <= i_0_i9_reg_309_pp1_iter3_reg;
        icmp_ln52_reg_1336_pp1_iter2_reg <= icmp_ln52_reg_1336_pp1_iter1_reg;
        icmp_ln52_reg_1336_pp1_iter3_reg <= icmp_ln52_reg_1336_pp1_iter2_reg;
        icmp_ln52_reg_1336_pp1_iter4_reg <= icmp_ln52_reg_1336_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_reg_297_pp0_iter1_reg <= i_0_i_reg_297;
        icmp_ln21_reg_1163 <= icmp_ln21_fu_392_p2;
        icmp_ln21_reg_1163_pp0_iter1_reg <= icmp_ln21_reg_1163;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_1340 <= i_1_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_1167 <= i_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln21_reg_1163_pp0_iter2_reg <= icmp_ln21_reg_1163_pp0_iter1_reg;
        icmp_ln21_reg_1163_pp0_iter3_reg <= icmp_ln21_reg_1163_pp0_iter2_reg;
        icmp_ln21_reg_1163_pp0_iter4_reg <= icmp_ln21_reg_1163_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        icmp_ln571_reg_1271 <= icmp_ln571_fu_797_p2;
        icmp_ln581_reg_1277 <= icmp_ln581_fu_809_p2;
        icmp_ln582_reg_1289 <= icmp_ln582_fu_835_p2;
        man_V_2_reg_1266 <= man_V_2_fu_789_p3;
        sh_amt_reg_1283 <= sh_amt_fu_827_p3;
        tmp_4_reg_1301 <= {{sh_amt_fu_827_p3[11:5]}};
        trunc_ln583_reg_1295 <= trunc_ln583_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln77_reg_1355 <= icmp_ln77_fu_1086_p2;
        icmp_ln77_reg_1355_pp2_iter1_reg <= icmp_ln77_reg_1355;
        theta_V_addr_1_reg_1369_pp2_iter1_reg <= theta_V_addr_1_reg_1369;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln77_reg_1355_pp2_iter2_reg <= icmp_ln77_reg_1355_pp2_iter1_reg;
        theta_V_addr_1_reg_1369_pp2_iter2_reg <= theta_V_addr_1_reg_1369_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln954_reg_1230 <= icmp_ln954_fu_623_p2;
        or_ln_i_reg_1225[0] <= or_ln_i_fu_615_p3[0];
        sub_ln944_reg_1219 <= sub_ln944_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        l_reg_1209 <= l_fu_510_p1;
        p_Result_8_reg_1192 <= p_Result_8_fu_466_p2;
        tmp_V_reg_1197 <= tmp_V_fu_472_p3;
        trunc_ln943_reg_1214 <= trunc_ln943_fu_514_p1;
        zext_ln938_reg_1203[31 : 0] <= zext_ln938_fu_480_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        m_4_reg_1235 <= {{m_1_fu_656_p2[31:1]}};
        tmp_2_reg_1240 <= m_1_fu_656_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln77_reg_1355_pp2_iter1_reg == 1'd0))) begin
        mul_ln1192_1_reg_1380[50 : 24] <= mul_ln1192_1_fu_1107_p2[50 : 24];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1163_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1192_reg_1182 <= mul_ln1192_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        or_ln603_2_reg_1321 <= or_ln603_2_fu_992_p2;
        or_ln603_reg_1311 <= or_ln603_fu_973_p2;
        select_ln603_1_reg_1316 <= select_ln603_1_fu_979_p3;
        select_ln603_reg_1306 <= select_ln603_fu_965_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln77_reg_1355_pp2_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln21_reg_1163_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_350 <= theta_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln52_reg_1336_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln21_reg_1163_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_354 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd0))) begin
        select_ln110_reg_1151 <= select_ln110_fu_376_p3;
        shl_ln_reg_1157[22 : 10] <= shl_ln_fu_384_p3[22 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        select_ln935_reg_1245 <= select_ln935_fu_729_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        sext_ln52_reg_1331 <= sext_ln52_fu_1032_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln77_fu_1086_p2 == 1'd0))) begin
        theta_V_addr_1_reg_1369 <= zext_ln82_fu_1098_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_1_i_reg_1250 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_2_i_reg_1255 <= grp_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_1336_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln7_reg_1350 <= {{r_V_fu_1066_p2[43:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        v_assign_reg_1260 <= grp_fu_337_p2;
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_392_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln52_fu_1036_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state47 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state47 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_1086_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state54 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state54 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_1336 == 1'd0))) begin
        ap_phi_mux_i_0_i9_phi_fu_313_p4 = i_1_reg_1340;
    end else begin
        ap_phi_mux_i_0_i9_phi_fu_313_p4 = i_0_i9_reg_309;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln21_reg_1163 == 1'd0))) begin
        ap_phi_mux_i_0_i_phi_fu_301_p4 = i_reg_1167;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_301_p4 = i_0_i_reg_297;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_address0 = zext_ln1117_1_fu_1057_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        data_V_address0 = zext_ln1117_fu_413_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gradient_V_address0 = zext_ln82_fu_1098_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        gradient_V_address0 = zext_ln57_fu_1081_p1;
    end else begin
        gradient_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        gradient_V_ce0 = 1'b1;
    end else begin
        gradient_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln52_reg_1336_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gradient_V_we0 = 1'b1;
    end else begin
        gradient_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        label_V_ce0 = 1'b1;
    end else begin
        label_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        theta_V_address0 = theta_V_addr_1_reg_1369;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        theta_V_address0 = zext_ln25_fu_418_p1;
    end else begin
        theta_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        theta_V_ce0 = 1'b1;
    end else begin
        theta_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        theta_V_ce1 = 1'b1;
    end else begin
        theta_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln77_reg_1355_pp2_iter2_reg == 1'd0))) begin
        theta_V_we1 = 1'b1;
    end else begin
        theta_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln107_fu_358_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_fu_392_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_fu_392_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln52_fu_1036_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln52_fu_1036_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln77_fu_1086_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln77_fu_1086_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_803_p2 = (12'd1075 - zext_ln461_fu_763_p1);

assign a_fu_576_p2 = (icmp_ln947_fu_539_p2 & icmp_ln947_1_fu_570_p2);

assign add_ln107_fu_364_p2 = (indvar_flatten_reg_263 + 15'd1);

assign add_ln1117_1_fu_1052_p2 = (zext_ln1116_1_fu_1048_p1 + shl_ln_reg_1157);

assign add_ln1117_fu_408_p2 = (shl_ln_reg_1157 + zext_ln1116_fu_404_p1);

assign add_ln581_fu_815_p2 = ($signed(12'd4077) + $signed(F2_fu_803_p2));

assign add_ln954_fu_629_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_1219));

assign add_ln964_fu_700_p2 = (sub_ln964_fu_695_p2 + select_ln964_fu_688_p3);

assign and_ln581_fu_925_p2 = (xor_ln582_fu_919_p2 & icmp_ln581_reg_1277);

assign and_ln582_fu_910_p2 = (xor_ln571_fu_905_p2 & icmp_ln582_reg_1289);

assign and_ln585_1_fu_942_p2 = (icmp_ln585_fu_858_p2 & and_ln581_fu_925_p2);

assign and_ln585_fu_936_p2 = (xor_ln585_fu_930_p2 & and_ln581_fu_925_p2);

assign and_ln603_fu_959_p2 = (xor_ln581_fu_953_p2 & icmp_ln603_fu_863_p2);

assign and_ln949_fu_603_p2 = (xor_ln949_fu_590_p2 & p_Result_3_fu_596_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ashr_ln586_fu_872_p2 = $signed(man_V_2_reg_1266) >>> zext_ln586_fu_868_p1;

assign bitcast_ln696_fu_881_p1 = v_assign_reg_1260;

assign bitcast_ln739_fu_725_p1 = p_Result_10_fu_713_p5;

assign exp_tmp_V_fu_753_p4 = {{ireg_V_fu_737_p1[62:52]}};

assign i_1_fu_1042_p2 = (ap_phi_mux_i_0_i9_phi_fu_313_p4 + 11'd1);

assign i_2_fu_1092_p2 = (i_0_i17_reg_321 + 11'd1);

assign i_fu_398_p2 = (ap_phi_mux_i_0_i_phi_fu_301_p4 + 11'd1);

assign icmp_ln107_fu_358_p2 = ((indvar_flatten_reg_263 == 15'd22500) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_370_p2 = ((training_id_0_reg_274 == 13'd4500) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_392_p2 = ((ap_phi_mux_i_0_i_phi_fu_301_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1036_p2 = ((ap_phi_mux_i_0_i9_phi_fu_313_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_797_p2 = ((trunc_ln556_fu_741_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_809_p2 = (($signed(F2_fu_803_p2) > $signed(12'd19)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_835_p2 = ((F2_fu_803_p2 == 12'd19) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_858_p2 = ((sh_amt_reg_1283 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_863_p2 = ((tmp_4_reg_1301 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_1086_p2 = ((i_0_i17_reg_321 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_679_p2 = ((p_Val2_s_reg_285 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_570_p2 = ((p_Result_4_fu_565_p2 != 33'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_539_p2 = (($signed(tmp_fu_529_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_fu_623_p2 = (($signed(lsb_index_fu_523_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ireg_V_fu_737_p1 = grp_fu_342_p1;

assign l_fu_510_p1 = tmp_i3_fu_502_p3[31:0];

assign label_V_address0 = zext_ln117_fu_998_p1;

assign lhs_V_1_fu_1113_p3 = {{reg_350}, {19'd0}};

assign lhs_V_fu_437_p3 = {{p_Val2_s_reg_285}, {12'd0}};

assign lsb_index_fu_523_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_fu_518_p2));

assign lshr_ln947_fu_559_p2 = 33'd8589934591 >> zext_ln947_fu_555_p1;

assign lshr_ln954_fu_634_p2 = tmp_V_reg_1197 >> add_ln954_fu_629_p2;

assign m_1_fu_656_p2 = (or_ln_i_reg_1225 + m_fu_649_p3);

assign m_5_fu_685_p1 = m_4_reg_1235;

assign m_fu_649_p3 = ((icmp_ln954_reg_1230[0:0] === 1'b1) ? lshr_ln954_fu_634_p2 : shl_ln954_fu_644_p2);

assign man_V_1_fu_783_p2 = (54'd0 - p_Result_12_fu_779_p1);

assign man_V_2_fu_789_p3 = ((p_Result_11_fu_745_p3[0:0] === 1'b1) ? man_V_1_fu_783_p2 : p_Result_12_fu_779_p1);

assign mul_ln1192_1_fu_1107_p0 = gradient_V_load_reg_1375;

assign mul_ln1192_1_fu_1107_p2 = ($signed(mul_ln1192_1_fu_1107_p0) * $signed(-51'h53000000));

assign mul_ln1192_fu_431_p0 = reg_354;

assign mul_ln1192_fu_431_p1 = reg_350;

assign mul_ln1192_fu_431_p2 = ($signed(mul_ln1192_fu_431_p0) * $signed(mul_ln1192_fu_431_p1));

assign or_ln581_fu_948_p2 = (or_ln582_fu_915_p2 | icmp_ln581_reg_1277);

assign or_ln582_fu_915_p2 = (icmp_ln582_reg_1289 | icmp_ln571_reg_1271);

assign or_ln603_1_fu_986_p2 = (and_ln585_fu_936_p2 | and_ln582_fu_910_p2);

assign or_ln603_2_fu_992_p2 = (or_ln603_fu_973_p2 | or_ln603_1_fu_986_p2);

assign or_ln603_fu_973_p2 = (and_ln603_fu_959_p2 | and_ln585_1_fu_942_p2);

assign or_ln949_fu_609_p2 = (and_ln949_fu_603_p2 | a_fu_576_p2);

assign or_ln_i_fu_615_p3 = {{31'd0}, {or_ln949_fu_609_p2}};

assign p_Result_10_fu_713_p5 = {{tmp_4_i_fu_706_p3}, {m_5_fu_685_p1[22:0]}};

assign p_Result_11_fu_745_p3 = ireg_V_fu_737_p1[32'd63];

assign p_Result_12_fu_779_p1 = tmp_5_i_fu_771_p3;

assign p_Result_3_fu_596_p3 = zext_ln938_reg_1203[lsb_index_fu_523_p2];

assign p_Result_4_fu_565_p2 = (zext_ln938_reg_1203 & lshr_ln947_fu_559_p2);

assign p_Result_8_fu_466_p2 = (($signed(p_Val2_s_reg_285) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign p_Result_9_fu_494_p3 = {{31'd2147483647}, {p_Result_s_fu_484_p4}};

integer ap_tvar_int_0;

always @ (zext_ln938_fu_480_p1) begin
    for (ap_tvar_int_0 = 33 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 32 - 0) begin
            p_Result_s_fu_484_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_484_p4[ap_tvar_int_0] = zext_ln938_fu_480_p1[32 - ap_tvar_int_0];
        end
    end
end

assign prob_V_fu_1007_p3 = ((or_ln603_2_reg_1321[0:0] === 1'b1) ? select_ln603_2_fu_1002_p3 : 32'd0);

assign r_V_fu_1066_p0 = sext_ln52_reg_1331;

assign r_V_fu_1066_p1 = reg_354;

assign r_V_fu_1066_p2 = ($signed(r_V_fu_1066_p0) * $signed(r_V_fu_1066_p1));

assign ret_V_1_fu_1121_p2 = (mul_ln1192_1_reg_1380 + lhs_V_1_fu_1113_p3);

assign ret_V_fu_445_p2 = (mul_ln1192_reg_1182 + lhs_V_fu_437_p3);

assign select_ln110_fu_376_p3 = ((icmp_ln110_fu_370_p2[0:0] === 1'b1) ? 13'd0 : training_id_0_reg_274);

assign select_ln588_fu_892_p3 = ((tmp_5_fu_884_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln603_1_fu_979_p3 = ((and_ln585_fu_936_p2[0:0] === 1'b1) ? select_ln588_fu_892_p3 : trunc_ln583_reg_1295);

assign select_ln603_2_fu_1002_p3 = ((or_ln603_reg_1311[0:0] === 1'b1) ? select_ln603_reg_1306 : select_ln603_1_reg_1316);

assign select_ln603_fu_965_p3 = ((and_ln603_fu_959_p2[0:0] === 1'b1) ? shl_ln604_fu_900_p2 : trunc_ln586_fu_877_p1);

assign select_ln935_fu_729_p3 = ((icmp_ln935_fu_679_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_725_p1);

assign select_ln964_fu_688_p3 = ((tmp_2_reg_1240[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln52_fu_1032_p1 = $signed(sub_ln703_fu_1026_p2);

assign sext_ln581_fu_855_p1 = sh_amt_reg_1283;

assign sh_amt_fu_827_p3 = ((icmp_ln581_fu_809_p2[0:0] === 1'b1) ? add_ln581_fu_815_p2 : sub_ln581_fu_821_p2);

assign shl_ln1_fu_1014_p3 = {{label_V_q0}, {19'd0}};

assign shl_ln604_fu_900_p2 = trunc_ln583_reg_1295 << sext_ln581_fu_855_p1;

assign shl_ln954_fu_644_p2 = tmp_V_reg_1197 << sub_ln954_fu_639_p2;

assign shl_ln_fu_384_p3 = {{select_ln110_fu_376_p3}, {10'd0}};

assign sub_ln1253_fu_460_p2 = (32'd0 - p_Val2_s_reg_285);

assign sub_ln581_fu_821_p2 = (12'd19 - F2_fu_803_p2);

assign sub_ln703_fu_1026_p2 = (prob_V_fu_1007_p3 - zext_ln1193_fu_1022_p1);

assign sub_ln944_fu_518_p2 = (32'd33 - l_reg_1209);

assign sub_ln947_fu_549_p2 = ($signed(6'd58) - $signed(trunc_ln947_fu_545_p1));

assign sub_ln954_fu_639_p2 = (32'd25 - sub_ln944_reg_1219);

assign sub_ln964_fu_695_p2 = (8'd14 - trunc_ln943_reg_1214);

assign theta_V_address1 = theta_V_addr_1_reg_1369_pp2_iter2_reg;

assign theta_V_d1 = {{ret_V_1_fu_1121_p2[50:19]}};

assign tmp_1_fu_582_p3 = lsb_index_fu_523_p2[32'd31];

assign tmp_4_i_fu_706_p3 = {{p_Result_8_reg_1192}, {add_ln964_fu_700_p2}};

assign tmp_5_fu_884_p3 = bitcast_ln696_fu_881_p1[32'd31];

assign tmp_5_i_fu_771_p3 = {{1'd1}, {trunc_ln565_fu_767_p1}};

assign tmp_V_fu_472_p3 = ((p_Result_8_fu_466_p2[0:0] === 1'b1) ? p_Val2_s_reg_285 : sub_ln1253_fu_460_p2);

assign tmp_fu_529_p4 = {{lsb_index_fu_523_p2[31:1]}};


always @ (p_Result_9_fu_494_p3) begin
    if (p_Result_9_fu_494_p3[0] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd0;
    end else if (p_Result_9_fu_494_p3[1] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd1;
    end else if (p_Result_9_fu_494_p3[2] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd2;
    end else if (p_Result_9_fu_494_p3[3] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd3;
    end else if (p_Result_9_fu_494_p3[4] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd4;
    end else if (p_Result_9_fu_494_p3[5] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd5;
    end else if (p_Result_9_fu_494_p3[6] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd6;
    end else if (p_Result_9_fu_494_p3[7] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd7;
    end else if (p_Result_9_fu_494_p3[8] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd8;
    end else if (p_Result_9_fu_494_p3[9] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd9;
    end else if (p_Result_9_fu_494_p3[10] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd10;
    end else if (p_Result_9_fu_494_p3[11] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd11;
    end else if (p_Result_9_fu_494_p3[12] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd12;
    end else if (p_Result_9_fu_494_p3[13] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd13;
    end else if (p_Result_9_fu_494_p3[14] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd14;
    end else if (p_Result_9_fu_494_p3[15] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd15;
    end else if (p_Result_9_fu_494_p3[16] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd16;
    end else if (p_Result_9_fu_494_p3[17] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd17;
    end else if (p_Result_9_fu_494_p3[18] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd18;
    end else if (p_Result_9_fu_494_p3[19] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd19;
    end else if (p_Result_9_fu_494_p3[20] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd20;
    end else if (p_Result_9_fu_494_p3[21] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd21;
    end else if (p_Result_9_fu_494_p3[22] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd22;
    end else if (p_Result_9_fu_494_p3[23] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd23;
    end else if (p_Result_9_fu_494_p3[24] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd24;
    end else if (p_Result_9_fu_494_p3[25] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd25;
    end else if (p_Result_9_fu_494_p3[26] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd26;
    end else if (p_Result_9_fu_494_p3[27] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd27;
    end else if (p_Result_9_fu_494_p3[28] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd28;
    end else if (p_Result_9_fu_494_p3[29] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd29;
    end else if (p_Result_9_fu_494_p3[30] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd30;
    end else if (p_Result_9_fu_494_p3[31] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd31;
    end else if (p_Result_9_fu_494_p3[32] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd32;
    end else if (p_Result_9_fu_494_p3[33] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd33;
    end else if (p_Result_9_fu_494_p3[34] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd34;
    end else if (p_Result_9_fu_494_p3[35] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd35;
    end else if (p_Result_9_fu_494_p3[36] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd36;
    end else if (p_Result_9_fu_494_p3[37] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd37;
    end else if (p_Result_9_fu_494_p3[38] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd38;
    end else if (p_Result_9_fu_494_p3[39] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd39;
    end else if (p_Result_9_fu_494_p3[40] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd40;
    end else if (p_Result_9_fu_494_p3[41] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd41;
    end else if (p_Result_9_fu_494_p3[42] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd42;
    end else if (p_Result_9_fu_494_p3[43] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd43;
    end else if (p_Result_9_fu_494_p3[44] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd44;
    end else if (p_Result_9_fu_494_p3[45] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd45;
    end else if (p_Result_9_fu_494_p3[46] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd46;
    end else if (p_Result_9_fu_494_p3[47] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd47;
    end else if (p_Result_9_fu_494_p3[48] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd48;
    end else if (p_Result_9_fu_494_p3[49] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd49;
    end else if (p_Result_9_fu_494_p3[50] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd50;
    end else if (p_Result_9_fu_494_p3[51] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd51;
    end else if (p_Result_9_fu_494_p3[52] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd52;
    end else if (p_Result_9_fu_494_p3[53] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd53;
    end else if (p_Result_9_fu_494_p3[54] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd54;
    end else if (p_Result_9_fu_494_p3[55] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd55;
    end else if (p_Result_9_fu_494_p3[56] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd56;
    end else if (p_Result_9_fu_494_p3[57] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd57;
    end else if (p_Result_9_fu_494_p3[58] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd58;
    end else if (p_Result_9_fu_494_p3[59] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd59;
    end else if (p_Result_9_fu_494_p3[60] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd60;
    end else if (p_Result_9_fu_494_p3[61] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd61;
    end else if (p_Result_9_fu_494_p3[62] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd62;
    end else if (p_Result_9_fu_494_p3[63] == 1'b1) begin
        tmp_i3_fu_502_p3 = 64'd63;
    end else begin
        tmp_i3_fu_502_p3 = 64'd64;
    end
end

assign training_id_fu_1137_p2 = (select_ln110_reg_1151 + 13'd1);

assign trunc_ln556_fu_741_p1 = ireg_V_fu_737_p1[62:0];

assign trunc_ln565_fu_767_p1 = ireg_V_fu_737_p1[51:0];

assign trunc_ln583_fu_841_p1 = man_V_2_fu_789_p3[31:0];

assign trunc_ln586_fu_877_p1 = ashr_ln586_fu_872_p2[31:0];

assign trunc_ln943_fu_514_p1 = tmp_i3_fu_502_p3[7:0];

assign trunc_ln947_fu_545_p1 = sub_ln944_fu_518_p2[5:0];

assign xor_ln571_fu_905_p2 = (icmp_ln571_reg_1271 ^ 1'd1);

assign xor_ln581_fu_953_p2 = (or_ln581_fu_948_p2 ^ 1'd1);

assign xor_ln582_fu_919_p2 = (or_ln582_fu_915_p2 ^ 1'd1);

assign xor_ln585_fu_930_p2 = (icmp_ln585_fu_858_p2 ^ 1'd1);

assign xor_ln949_fu_590_p2 = (tmp_1_fu_582_p3 ^ 1'd1);

assign zext_ln1116_1_fu_1048_p1 = ap_phi_mux_i_0_i9_phi_fu_313_p4;

assign zext_ln1116_fu_404_p1 = ap_phi_mux_i_0_i_phi_fu_301_p4;

assign zext_ln1117_1_fu_1057_p1 = add_ln1117_1_fu_1052_p2;

assign zext_ln1117_fu_413_p1 = add_ln1117_fu_408_p2;

assign zext_ln117_fu_998_p1 = select_ln110_reg_1151;

assign zext_ln1193_fu_1022_p1 = shl_ln1_fu_1014_p3;

assign zext_ln25_fu_418_p1 = i_0_i_reg_297_pp0_iter1_reg;

assign zext_ln461_fu_763_p1 = exp_tmp_V_fu_753_p4;

assign zext_ln57_fu_1081_p1 = i_0_i9_reg_309_pp1_iter4_reg;

assign zext_ln586_fu_868_p1 = $unsigned(sext_ln581_fu_855_p1);

assign zext_ln82_fu_1098_p1 = i_0_i17_reg_321;

assign zext_ln938_fu_480_p1 = tmp_V_fu_472_p3;

assign zext_ln947_fu_555_p1 = sub_ln947_fu_549_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_1157[9:0] <= 10'b0000000000;
    zext_ln938_reg_1203[32] <= 1'b0;
    or_ln_i_reg_1225[31:1] <= 31'b0000000000000000000000000000000;
    mul_ln1192_1_reg_1380[23:0] <= 24'b000000000000000000000000;
end

endmodule //SgdLR_sw
